[project]
name = "dj-music-cleaner"
version = "2.0.0"
description = "Professional-grade DJ music library management with unified service-oriented architecture"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "RamC Venkatasamy", email = "ramc46@example.com"}
]
maintainers = [
    {name = "RamC Venkatasamy", email = "ramc46@example.com"}
]
keywords = [
    "dj", "music", "audio", "metadata", "bpm", "key-detection", 
    "rekordbox", "music-library", "audio-analysis", "mp3", "flac",
    "cue-points", "beatgrid", "energy-analysis", "professional-audio"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Environment :: Console",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Multimedia :: Sound/Audio :: Analysis",
    "Topic :: System :: Archiving :: Packaging",
    "Topic :: Utilities"
]

# Core dependencies - minimal installation
dependencies = [
    "mutagen>=1.47.0",      # Audio metadata handling
    "numpy>=1.24.0",        # Numerical processing  
    "tqdm>=4.66.0",         # Progress indicators
    "soundfile>=0.12.0",    # Audio file I/O
    "python-dotenv>=1.0.0", # Environment variables
]

[project.optional-dependencies]
# Audio analysis features
audio = [
    "aubio>=0.4.9",         # Primary audio analysis engine
    "librosa>=0.10.0",      # Enhanced audio analysis (fallback)
    "scipy>=1.10.0",        # Signal processing
]

# Online metadata enhancement
online = [
    "pyacoustid>=1.2.2",        # AcoustID fingerprinting
    "musicbrainzngs>=0.7.1",    # MusicBrainz API
    "requests>=2.28.0",         # HTTP client
]

# Advanced processing features
advanced = [
    "pyloudnorm>=0.1.1",        # Loudness normalization
]

# Full installation (all features)
full = [
    "aubio>=0.4.9",             # Audio analysis
    "librosa>=0.10.0",          # Enhanced audio features
    "scipy>=1.10.0",            # Signal processing
    "pyacoustid>=1.2.2",        # AcoustID fingerprinting
    "musicbrainzngs>=0.7.1",    # MusicBrainz API
    "requests>=2.28.0",         # HTTP client
    "pyloudnorm>=0.1.1",        # Loudness normalization
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]

[project.scripts]
# Main unified CLI interface
dj-music-cleaner = "djmusiccleaner.cli.unified_cli:main"
djmusiccleaner = "djmusiccleaner.cli.unified_cli:main"

[project.urls]
Homepage = "https://github.com/ramc46/dj-music-cleaner"
Documentation = "https://github.com/ramc46/dj-music-cleaner#readme" 
Repository = "https://github.com/ramc46/dj-music-cleaner"
"Bug Reports" = "https://github.com/ramc46/dj-music-cleaner/issues"
Changelog = "https://github.com/ramc46/dj-music-cleaner/releases"

[tool.setuptools]
zip-safe = false

[tool.setuptools.packages.find]
where = ["."]
include = ["djmusiccleaner*"]
exclude = ["djmusiccleaner.archive*", "tests*", "test_*"]

[tool.setuptools.package-data]
djmusiccleaner = ["*.json", "*.yml", "*.yaml"]

[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

# Development tool configurations

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    ".tox"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]